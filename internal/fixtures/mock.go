// Code generated by MockGen. DO NOT EDIT.
// Source: model.go
//
// Generated by this command:
//
//	mockgen -source model.go -destination=../fixtures/mock.go -package=fixtures
//
// Package fixtures is a generated GoMock package.
package fixtures

import (
	context "context"
	os "os"
	reflect "reflect"

	constants "github.com/bmc-toolbox/bmclib/v2/constants"
	common "github.com/bmc-toolbox/common"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceQueryor is a mock of DeviceQueryor interface.
type MockDeviceQueryor struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceQueryorMockRecorder
}

// MockDeviceQueryorMockRecorder is the mock recorder for MockDeviceQueryor.
type MockDeviceQueryorMockRecorder struct {
	mock *MockDeviceQueryor
}

// NewMockDeviceQueryor creates a new mock instance.
func NewMockDeviceQueryor(ctrl *gomock.Controller) *MockDeviceQueryor {
	mock := &MockDeviceQueryor{ctrl: ctrl}
	mock.recorder = &MockDeviceQueryorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceQueryor) EXPECT() *MockDeviceQueryorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDeviceQueryor) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeviceQueryorMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeviceQueryor)(nil).Close), ctx)
}

// FirmwareInstall mocks base method.
func (m *MockDeviceQueryor) FirmwareInstall(ctx context.Context, componentSlug string, force bool, file *os.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareInstall", ctx, componentSlug, force, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirmwareInstall indicates an expected call of FirmwareInstall.
func (mr *MockDeviceQueryorMockRecorder) FirmwareInstall(ctx, componentSlug, force, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareInstall", reflect.TypeOf((*MockDeviceQueryor)(nil).FirmwareInstall), ctx, componentSlug, force, file)
}

// FirmwareInstallSteps mocks base method.
func (m *MockDeviceQueryor) FirmwareInstallSteps(ctx context.Context, component string) ([]constants.FirmwareInstallStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareInstallSteps", ctx, component)
	ret0, _ := ret[0].([]constants.FirmwareInstallStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirmwareInstallSteps indicates an expected call of FirmwareInstallSteps.
func (mr *MockDeviceQueryorMockRecorder) FirmwareInstallSteps(ctx, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareInstallSteps", reflect.TypeOf((*MockDeviceQueryor)(nil).FirmwareInstallSteps), ctx, component)
}

// FirmwareInstallUploaded mocks base method.
func (m *MockDeviceQueryor) FirmwareInstallUploaded(ctx context.Context, component, uploadVerifyTaskID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareInstallUploaded", ctx, component, uploadVerifyTaskID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirmwareInstallUploaded indicates an expected call of FirmwareInstallUploaded.
func (mr *MockDeviceQueryorMockRecorder) FirmwareInstallUploaded(ctx, component, uploadVerifyTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareInstallUploaded", reflect.TypeOf((*MockDeviceQueryor)(nil).FirmwareInstallUploaded), ctx, component, uploadVerifyTaskID)
}

// FirmwareTaskStatus mocks base method.
func (m *MockDeviceQueryor) FirmwareTaskStatus(ctx context.Context, kind constants.FirmwareInstallStep, component, taskID, installVersion string, tryOpen bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareTaskStatus", ctx, kind, component, taskID, installVersion, tryOpen)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FirmwareTaskStatus indicates an expected call of FirmwareTaskStatus.
func (mr *MockDeviceQueryorMockRecorder) FirmwareTaskStatus(ctx, kind, component, taskID, installVersion, tryOpen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareTaskStatus", reflect.TypeOf((*MockDeviceQueryor)(nil).FirmwareTaskStatus), ctx, kind, component, taskID, installVersion, tryOpen)
}

// FirmwareUpload mocks base method.
func (m *MockDeviceQueryor) FirmwareUpload(ctx context.Context, component string, reader *os.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirmwareUpload", ctx, component, reader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirmwareUpload indicates an expected call of FirmwareUpload.
func (mr *MockDeviceQueryorMockRecorder) FirmwareUpload(ctx, component, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirmwareUpload", reflect.TypeOf((*MockDeviceQueryor)(nil).FirmwareUpload), ctx, component, reader)
}

// Inventory mocks base method.
func (m *MockDeviceQueryor) Inventory(ctx context.Context) (*common.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inventory", ctx)
	ret0, _ := ret[0].(*common.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inventory indicates an expected call of Inventory.
func (mr *MockDeviceQueryorMockRecorder) Inventory(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inventory", reflect.TypeOf((*MockDeviceQueryor)(nil).Inventory), ctx)
}

// Open mocks base method.
func (m *MockDeviceQueryor) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDeviceQueryorMockRecorder) Open(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDeviceQueryor)(nil).Open), ctx)
}

// PowerStatus mocks base method.
func (m *MockDeviceQueryor) PowerStatus(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerStatus", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerStatus indicates an expected call of PowerStatus.
func (mr *MockDeviceQueryorMockRecorder) PowerStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerStatus", reflect.TypeOf((*MockDeviceQueryor)(nil).PowerStatus), ctx)
}

// ResetBMC mocks base method.
func (m *MockDeviceQueryor) ResetBMC(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetBMC", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetBMC indicates an expected call of ResetBMC.
func (mr *MockDeviceQueryorMockRecorder) ResetBMC(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBMC", reflect.TypeOf((*MockDeviceQueryor)(nil).ResetBMC), ctx)
}

// SetPowerState mocks base method.
func (m *MockDeviceQueryor) SetPowerState(ctx context.Context, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPowerState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPowerState indicates an expected call of SetPowerState.
func (mr *MockDeviceQueryorMockRecorder) SetPowerState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPowerState", reflect.TypeOf((*MockDeviceQueryor)(nil).SetPowerState), ctx, state)
}
