// Code generated by mockery v2.42.1. DO NOT EDIT.

package device

import (
	context "context"

	common "github.com/bmc-toolbox/common"

	mock "github.com/stretchr/testify/mock"

	model "github.com/metal-toolbox/ironlib/model"
)

// MockInbandQueryor is an autogenerated mock type for the InbandQueryor type
type MockInbandQueryor struct {
	mock.Mock
}

type MockInbandQueryor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInbandQueryor) EXPECT() *MockInbandQueryor_Expecter {
	return &MockInbandQueryor_Expecter{mock: &_m.Mock}
}

// FirmwareInstall provides a mock function with given fields: ctx, component, vendor, _a3, version, updateFile, force
func (_m *MockInbandQueryor) FirmwareInstall(ctx context.Context, component string, vendor string, _a3 string, version string, updateFile string, force bool) error {
	ret := _m.Called(ctx, component, vendor, _a3, version, updateFile, force)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareInstall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, bool) error); ok {
		r0 = rf(ctx, component, vendor, _a3, version, updateFile, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInbandQueryor_FirmwareInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareInstall'
type MockInbandQueryor_FirmwareInstall_Call struct {
	*mock.Call
}

// FirmwareInstall is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
//   - vendor string
//   - _a3 string
//   - version string
//   - updateFile string
//   - force bool
func (_e *MockInbandQueryor_Expecter) FirmwareInstall(ctx interface{}, component interface{}, vendor interface{}, _a3 interface{}, version interface{}, updateFile interface{}, force interface{}) *MockInbandQueryor_FirmwareInstall_Call {
	return &MockInbandQueryor_FirmwareInstall_Call{Call: _e.mock.On("FirmwareInstall", ctx, component, vendor, _a3, version, updateFile, force)}
}

func (_c *MockInbandQueryor_FirmwareInstall_Call) Run(run func(ctx context.Context, component string, vendor string, _a3 string, version string, updateFile string, force bool)) *MockInbandQueryor_FirmwareInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(bool))
	})
	return _c
}

func (_c *MockInbandQueryor_FirmwareInstall_Call) Return(_a0 error) *MockInbandQueryor_FirmwareInstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInbandQueryor_FirmwareInstall_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, bool) error) *MockInbandQueryor_FirmwareInstall_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareInstallRequirements provides a mock function with given fields: ctx, component, vendor, _a3
func (_m *MockInbandQueryor) FirmwareInstallRequirements(ctx context.Context, component string, vendor string, _a3 string) (*model.UpdateRequirements, error) {
	ret := _m.Called(ctx, component, vendor, _a3)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareInstallRequirements")
	}

	var r0 *model.UpdateRequirements
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.UpdateRequirements, error)); ok {
		return rf(ctx, component, vendor, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.UpdateRequirements); ok {
		r0 = rf(ctx, component, vendor, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateRequirements)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, component, vendor, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInbandQueryor_FirmwareInstallRequirements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareInstallRequirements'
type MockInbandQueryor_FirmwareInstallRequirements_Call struct {
	*mock.Call
}

// FirmwareInstallRequirements is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
//   - vendor string
//   - _a3 string
func (_e *MockInbandQueryor_Expecter) FirmwareInstallRequirements(ctx interface{}, component interface{}, vendor interface{}, _a3 interface{}) *MockInbandQueryor_FirmwareInstallRequirements_Call {
	return &MockInbandQueryor_FirmwareInstallRequirements_Call{Call: _e.mock.On("FirmwareInstallRequirements", ctx, component, vendor, _a3)}
}

func (_c *MockInbandQueryor_FirmwareInstallRequirements_Call) Run(run func(ctx context.Context, component string, vendor string, _a3 string)) *MockInbandQueryor_FirmwareInstallRequirements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockInbandQueryor_FirmwareInstallRequirements_Call) Return(_a0 *model.UpdateRequirements, _a1 error) *MockInbandQueryor_FirmwareInstallRequirements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInbandQueryor_FirmwareInstallRequirements_Call) RunAndReturn(run func(context.Context, string, string, string) (*model.UpdateRequirements, error)) *MockInbandQueryor_FirmwareInstallRequirements_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields: ctx
func (_m *MockInbandQueryor) Inventory(ctx context.Context) (*common.Device, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Inventory")
	}

	var r0 *common.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*common.Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *common.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInbandQueryor_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type MockInbandQueryor_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInbandQueryor_Expecter) Inventory(ctx interface{}) *MockInbandQueryor_Inventory_Call {
	return &MockInbandQueryor_Inventory_Call{Call: _e.mock.On("Inventory", ctx)}
}

func (_c *MockInbandQueryor_Inventory_Call) Run(run func(ctx context.Context)) *MockInbandQueryor_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInbandQueryor_Inventory_Call) Return(_a0 *common.Device, _a1 error) *MockInbandQueryor_Inventory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInbandQueryor_Inventory_Call) RunAndReturn(run func(context.Context) (*common.Device, error)) *MockInbandQueryor_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInbandQueryor creates a new instance of MockInbandQueryor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInbandQueryor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInbandQueryor {
	mock := &MockInbandQueryor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
