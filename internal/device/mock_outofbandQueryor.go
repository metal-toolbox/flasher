// Code generated by mockery v2.42.1. DO NOT EDIT.

package device

import (
	constants "github.com/bmc-toolbox/bmclib/v2/constants"
	common "github.com/bmc-toolbox/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	os "os"
)

// MockOutofbandQueryor is an autogenerated mock type for the OutofbandQueryor type
type MockOutofbandQueryor struct {
	mock.Mock
}

type MockOutofbandQueryor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOutofbandQueryor) EXPECT() *MockOutofbandQueryor_Expecter {
	return &MockOutofbandQueryor_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOutofbandQueryor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockOutofbandQueryor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) Close(ctx interface{}) *MockOutofbandQueryor_Close_Call {
	return &MockOutofbandQueryor_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockOutofbandQueryor_Close_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_Close_Call) Return(_a0 error) *MockOutofbandQueryor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutofbandQueryor_Close_Call) RunAndReturn(run func(context.Context) error) *MockOutofbandQueryor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareInstallSteps provides a mock function with given fields: ctx, component
func (_m *MockOutofbandQueryor) FirmwareInstallSteps(ctx context.Context, component string) ([]constants.FirmwareInstallStep, error) {
	ret := _m.Called(ctx, component)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareInstallSteps")
	}

	var r0 []constants.FirmwareInstallStep
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]constants.FirmwareInstallStep, error)); ok {
		return rf(ctx, component)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []constants.FirmwareInstallStep); ok {
		r0 = rf(ctx, component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]constants.FirmwareInstallStep)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_FirmwareInstallSteps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareInstallSteps'
type MockOutofbandQueryor_FirmwareInstallSteps_Call struct {
	*mock.Call
}

// FirmwareInstallSteps is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
func (_e *MockOutofbandQueryor_Expecter) FirmwareInstallSteps(ctx interface{}, component interface{}) *MockOutofbandQueryor_FirmwareInstallSteps_Call {
	return &MockOutofbandQueryor_FirmwareInstallSteps_Call{Call: _e.mock.On("FirmwareInstallSteps", ctx, component)}
}

func (_c *MockOutofbandQueryor_FirmwareInstallSteps_Call) Run(run func(ctx context.Context, component string)) *MockOutofbandQueryor_FirmwareInstallSteps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallSteps_Call) Return(_a0 []constants.FirmwareInstallStep, _a1 error) *MockOutofbandQueryor_FirmwareInstallSteps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallSteps_Call) RunAndReturn(run func(context.Context, string) ([]constants.FirmwareInstallStep, error)) *MockOutofbandQueryor_FirmwareInstallSteps_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareInstallUploadAndInitiate provides a mock function with given fields: ctx, component, file
func (_m *MockOutofbandQueryor) FirmwareInstallUploadAndInitiate(ctx context.Context, component string, file *os.File) (string, error) {
	ret := _m.Called(ctx, component, file)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareInstallUploadAndInitiate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *os.File) (string, error)); ok {
		return rf(ctx, component, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *os.File) string); ok {
		r0 = rf(ctx, component, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *os.File) error); ok {
		r1 = rf(ctx, component, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareInstallUploadAndInitiate'
type MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call struct {
	*mock.Call
}

// FirmwareInstallUploadAndInitiate is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
//   - file *os.File
func (_e *MockOutofbandQueryor_Expecter) FirmwareInstallUploadAndInitiate(ctx interface{}, component interface{}, file interface{}) *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call {
	return &MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call{Call: _e.mock.On("FirmwareInstallUploadAndInitiate", ctx, component, file)}
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call) Run(run func(ctx context.Context, component string, file *os.File)) *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*os.File))
	})
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call) Return(taskID string, err error) *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call {
	_c.Call.Return(taskID, err)
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call) RunAndReturn(run func(context.Context, string, *os.File) (string, error)) *MockOutofbandQueryor_FirmwareInstallUploadAndInitiate_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareInstallUploaded provides a mock function with given fields: ctx, component, uploadVerifyTaskID
func (_m *MockOutofbandQueryor) FirmwareInstallUploaded(ctx context.Context, component string, uploadVerifyTaskID string) (string, error) {
	ret := _m.Called(ctx, component, uploadVerifyTaskID)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareInstallUploaded")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, component, uploadVerifyTaskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, component, uploadVerifyTaskID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, component, uploadVerifyTaskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_FirmwareInstallUploaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareInstallUploaded'
type MockOutofbandQueryor_FirmwareInstallUploaded_Call struct {
	*mock.Call
}

// FirmwareInstallUploaded is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
//   - uploadVerifyTaskID string
func (_e *MockOutofbandQueryor_Expecter) FirmwareInstallUploaded(ctx interface{}, component interface{}, uploadVerifyTaskID interface{}) *MockOutofbandQueryor_FirmwareInstallUploaded_Call {
	return &MockOutofbandQueryor_FirmwareInstallUploaded_Call{Call: _e.mock.On("FirmwareInstallUploaded", ctx, component, uploadVerifyTaskID)}
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploaded_Call) Run(run func(ctx context.Context, component string, uploadVerifyTaskID string)) *MockOutofbandQueryor_FirmwareInstallUploaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploaded_Call) Return(installTaskID string, err error) *MockOutofbandQueryor_FirmwareInstallUploaded_Call {
	_c.Call.Return(installTaskID, err)
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareInstallUploaded_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockOutofbandQueryor_FirmwareInstallUploaded_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareTaskStatus provides a mock function with given fields: ctx, kind, component, taskID, installVersion
func (_m *MockOutofbandQueryor) FirmwareTaskStatus(ctx context.Context, kind constants.FirmwareInstallStep, component string, taskID string, installVersion string) (constants.TaskState, string, error) {
	ret := _m.Called(ctx, kind, component, taskID, installVersion)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareTaskStatus")
	}

	var r0 constants.TaskState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, constants.FirmwareInstallStep, string, string, string) (constants.TaskState, string, error)); ok {
		return rf(ctx, kind, component, taskID, installVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, constants.FirmwareInstallStep, string, string, string) constants.TaskState); ok {
		r0 = rf(ctx, kind, component, taskID, installVersion)
	} else {
		r0 = ret.Get(0).(constants.TaskState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, constants.FirmwareInstallStep, string, string, string) string); ok {
		r1 = rf(ctx, kind, component, taskID, installVersion)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, constants.FirmwareInstallStep, string, string, string) error); ok {
		r2 = rf(ctx, kind, component, taskID, installVersion)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOutofbandQueryor_FirmwareTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareTaskStatus'
type MockOutofbandQueryor_FirmwareTaskStatus_Call struct {
	*mock.Call
}

// FirmwareTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - kind constants.FirmwareInstallStep
//   - component string
//   - taskID string
//   - installVersion string
func (_e *MockOutofbandQueryor_Expecter) FirmwareTaskStatus(ctx interface{}, kind interface{}, component interface{}, taskID interface{}, installVersion interface{}) *MockOutofbandQueryor_FirmwareTaskStatus_Call {
	return &MockOutofbandQueryor_FirmwareTaskStatus_Call{Call: _e.mock.On("FirmwareTaskStatus", ctx, kind, component, taskID, installVersion)}
}

func (_c *MockOutofbandQueryor_FirmwareTaskStatus_Call) Run(run func(ctx context.Context, kind constants.FirmwareInstallStep, component string, taskID string, installVersion string)) *MockOutofbandQueryor_FirmwareTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(constants.FirmwareInstallStep), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareTaskStatus_Call) Return(state constants.TaskState, status string, err error) *MockOutofbandQueryor_FirmwareTaskStatus_Call {
	_c.Call.Return(state, status, err)
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareTaskStatus_Call) RunAndReturn(run func(context.Context, constants.FirmwareInstallStep, string, string, string) (constants.TaskState, string, error)) *MockOutofbandQueryor_FirmwareTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FirmwareUpload provides a mock function with given fields: ctx, component, reader
func (_m *MockOutofbandQueryor) FirmwareUpload(ctx context.Context, component string, reader *os.File) (string, error) {
	ret := _m.Called(ctx, component, reader)

	if len(ret) == 0 {
		panic("no return value specified for FirmwareUpload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *os.File) (string, error)); ok {
		return rf(ctx, component, reader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *os.File) string); ok {
		r0 = rf(ctx, component, reader)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *os.File) error); ok {
		r1 = rf(ctx, component, reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_FirmwareUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirmwareUpload'
type MockOutofbandQueryor_FirmwareUpload_Call struct {
	*mock.Call
}

// FirmwareUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - component string
//   - reader *os.File
func (_e *MockOutofbandQueryor_Expecter) FirmwareUpload(ctx interface{}, component interface{}, reader interface{}) *MockOutofbandQueryor_FirmwareUpload_Call {
	return &MockOutofbandQueryor_FirmwareUpload_Call{Call: _e.mock.On("FirmwareUpload", ctx, component, reader)}
}

func (_c *MockOutofbandQueryor_FirmwareUpload_Call) Run(run func(ctx context.Context, component string, reader *os.File)) *MockOutofbandQueryor_FirmwareUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*os.File))
	})
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareUpload_Call) Return(uploadVerifyTaskID string, err error) *MockOutofbandQueryor_FirmwareUpload_Call {
	_c.Call.Return(uploadVerifyTaskID, err)
	return _c
}

func (_c *MockOutofbandQueryor_FirmwareUpload_Call) RunAndReturn(run func(context.Context, string, *os.File) (string, error)) *MockOutofbandQueryor_FirmwareUpload_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) Inventory(ctx context.Context) (*common.Device, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Inventory")
	}

	var r0 *common.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*common.Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *common.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type MockOutofbandQueryor_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) Inventory(ctx interface{}) *MockOutofbandQueryor_Inventory_Call {
	return &MockOutofbandQueryor_Inventory_Call{Call: _e.mock.On("Inventory", ctx)}
}

func (_c *MockOutofbandQueryor_Inventory_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_Inventory_Call) Return(_a0 *common.Device, _a1 error) *MockOutofbandQueryor_Inventory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOutofbandQueryor_Inventory_Call) RunAndReturn(run func(context.Context) (*common.Device, error)) *MockOutofbandQueryor_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) Open(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOutofbandQueryor_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockOutofbandQueryor_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) Open(ctx interface{}) *MockOutofbandQueryor_Open_Call {
	return &MockOutofbandQueryor_Open_Call{Call: _e.mock.On("Open", ctx)}
}

func (_c *MockOutofbandQueryor_Open_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_Open_Call) Return(_a0 error) *MockOutofbandQueryor_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutofbandQueryor_Open_Call) RunAndReturn(run func(context.Context) error) *MockOutofbandQueryor_Open_Call {
	_c.Call.Return(run)
	return _c
}

// PowerStatus provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) PowerStatus(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PowerStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOutofbandQueryor_PowerStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerStatus'
type MockOutofbandQueryor_PowerStatus_Call struct {
	*mock.Call
}

// PowerStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) PowerStatus(ctx interface{}) *MockOutofbandQueryor_PowerStatus_Call {
	return &MockOutofbandQueryor_PowerStatus_Call{Call: _e.mock.On("PowerStatus", ctx)}
}

func (_c *MockOutofbandQueryor_PowerStatus_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_PowerStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_PowerStatus_Call) Return(status string, err error) *MockOutofbandQueryor_PowerStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockOutofbandQueryor_PowerStatus_Call) RunAndReturn(run func(context.Context) (string, error)) *MockOutofbandQueryor_PowerStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ReinitializeClient provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) ReinitializeClient(ctx context.Context) {
	_m.Called(ctx)
}

// MockOutofbandQueryor_ReinitializeClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReinitializeClient'
type MockOutofbandQueryor_ReinitializeClient_Call struct {
	*mock.Call
}

// ReinitializeClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) ReinitializeClient(ctx interface{}) *MockOutofbandQueryor_ReinitializeClient_Call {
	return &MockOutofbandQueryor_ReinitializeClient_Call{Call: _e.mock.On("ReinitializeClient", ctx)}
}

func (_c *MockOutofbandQueryor_ReinitializeClient_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_ReinitializeClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_ReinitializeClient_Call) Return() *MockOutofbandQueryor_ReinitializeClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOutofbandQueryor_ReinitializeClient_Call) RunAndReturn(run func(context.Context)) *MockOutofbandQueryor_ReinitializeClient_Call {
	_c.Call.Return(run)
	return _c
}

// ResetBMC provides a mock function with given fields: ctx
func (_m *MockOutofbandQueryor) ResetBMC(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ResetBMC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOutofbandQueryor_ResetBMC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetBMC'
type MockOutofbandQueryor_ResetBMC_Call struct {
	*mock.Call
}

// ResetBMC is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutofbandQueryor_Expecter) ResetBMC(ctx interface{}) *MockOutofbandQueryor_ResetBMC_Call {
	return &MockOutofbandQueryor_ResetBMC_Call{Call: _e.mock.On("ResetBMC", ctx)}
}

func (_c *MockOutofbandQueryor_ResetBMC_Call) Run(run func(ctx context.Context)) *MockOutofbandQueryor_ResetBMC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOutofbandQueryor_ResetBMC_Call) Return(_a0 error) *MockOutofbandQueryor_ResetBMC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutofbandQueryor_ResetBMC_Call) RunAndReturn(run func(context.Context) error) *MockOutofbandQueryor_ResetBMC_Call {
	_c.Call.Return(run)
	return _c
}

// SetPowerState provides a mock function with given fields: ctx, state
func (_m *MockOutofbandQueryor) SetPowerState(ctx context.Context, state string) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for SetPowerState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOutofbandQueryor_SetPowerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPowerState'
type MockOutofbandQueryor_SetPowerState_Call struct {
	*mock.Call
}

// SetPowerState is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
func (_e *MockOutofbandQueryor_Expecter) SetPowerState(ctx interface{}, state interface{}) *MockOutofbandQueryor_SetPowerState_Call {
	return &MockOutofbandQueryor_SetPowerState_Call{Call: _e.mock.On("SetPowerState", ctx, state)}
}

func (_c *MockOutofbandQueryor_SetPowerState_Call) Run(run func(ctx context.Context, state string)) *MockOutofbandQueryor_SetPowerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOutofbandQueryor_SetPowerState_Call) Return(_a0 error) *MockOutofbandQueryor_SetPowerState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOutofbandQueryor_SetPowerState_Call) RunAndReturn(run func(context.Context, string) error) *MockOutofbandQueryor_SetPowerState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOutofbandQueryor creates a new instance of MockOutofbandQueryor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOutofbandQueryor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOutofbandQueryor {
	mock := &MockOutofbandQueryor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
