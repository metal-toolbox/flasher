// Code generated by mockery v2.42.1. DO NOT EDIT.

package runner

import (
	context "context"

	model "github.com/metal-toolbox/flasher/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockActionHandler is an autogenerated mock type for the ActionHandler type
type MockActionHandler struct {
	mock.Mock
}

type MockActionHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActionHandler) EXPECT() *MockActionHandler_Expecter {
	return &MockActionHandler_Expecter{mock: &_m.Mock}
}

// ComposeAction provides a mock function with given fields: ctx, actionCtx
func (_m *MockActionHandler) ComposeAction(ctx context.Context, actionCtx *ActionHandlerContext) (*model.Action, error) {
	ret := _m.Called(ctx, actionCtx)

	if len(ret) == 0 {
		panic("no return value specified for ComposeAction")
	}

	var r0 *model.Action
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ActionHandlerContext) (*model.Action, error)); ok {
		return rf(ctx, actionCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ActionHandlerContext) *model.Action); ok {
		r0 = rf(ctx, actionCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ActionHandlerContext) error); ok {
		r1 = rf(ctx, actionCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActionHandler_ComposeAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComposeAction'
type MockActionHandler_ComposeAction_Call struct {
	*mock.Call
}

// ComposeAction is a helper method to define mock.On call
//   - ctx context.Context
//   - actionCtx *ActionHandlerContext
func (_e *MockActionHandler_Expecter) ComposeAction(ctx interface{}, actionCtx interface{}) *MockActionHandler_ComposeAction_Call {
	return &MockActionHandler_ComposeAction_Call{Call: _e.mock.On("ComposeAction", ctx, actionCtx)}
}

func (_c *MockActionHandler_ComposeAction_Call) Run(run func(ctx context.Context, actionCtx *ActionHandlerContext)) *MockActionHandler_ComposeAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ActionHandlerContext))
	})
	return _c
}

func (_c *MockActionHandler_ComposeAction_Call) Return(_a0 *model.Action, _a1 error) *MockActionHandler_ComposeAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActionHandler_ComposeAction_Call) RunAndReturn(run func(context.Context, *ActionHandlerContext) (*model.Action, error)) *MockActionHandler_ComposeAction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActionHandler creates a new instance of MockActionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActionHandler {
	mock := &MockActionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
