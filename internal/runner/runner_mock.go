// Code generated by MockGen. DO NOT EDIT.
// Source: internal/runner/runner.go
//
// Generated by this command:
//
//	mockgen -source internal/runner/runner.go -destination=internal/runner/runner_mock.go -package=runner
//
// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	reflect "reflect"

	model "github.com/metal-toolbox/flasher/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockHandler) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockHandlerMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockHandler)(nil).Initialize), ctx)
}

// OnFailure mocks base method.
func (m *MockHandler) OnFailure(ctx context.Context, task *model.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFailure", ctx, task)
}

// OnFailure indicates an expected call of OnFailure.
func (mr *MockHandlerMockRecorder) OnFailure(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFailure", reflect.TypeOf((*MockHandler)(nil).OnFailure), ctx, task)
}

// OnSuccess mocks base method.
func (m *MockHandler) OnSuccess(ctx context.Context, task *model.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuccess", ctx, task)
}

// OnSuccess indicates an expected call of OnSuccess.
func (mr *MockHandlerMockRecorder) OnSuccess(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuccess", reflect.TypeOf((*MockHandler)(nil).OnSuccess), ctx, task)
}

// PlanActions mocks base method.
func (m *MockHandler) PlanActions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanActions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlanActions indicates an expected call of PlanActions.
func (mr *MockHandlerMockRecorder) PlanActions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanActions", reflect.TypeOf((*MockHandler)(nil).PlanActions), ctx)
}

// Publish mocks base method.
func (m *MockHandler) Publish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish")
}

// Publish indicates an expected call of Publish.
func (mr *MockHandlerMockRecorder) Publish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockHandler)(nil).Publish))
}

// Query mocks base method.
func (m *MockHandler) Query(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockHandlerMockRecorder) Query(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockHandler)(nil).Query), ctx)
}

// RunActions mocks base method.
func (m *MockHandler) RunActions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunActions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunActions indicates an expected call of RunActions.
func (mr *MockHandlerMockRecorder) RunActions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActions", reflect.TypeOf((*MockHandler)(nil).RunActions), ctx)
}
